# .github/workflows/deploy.yml
name: CI/CD to AWS EC2 via ECR and SSM

# Controls when the workflow will run
on:
  push:
    # Triggers on pushes to the 'main' branch
    branches:
      - main

# Define a single job that runs on the latest Ubuntu runner
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Define environment variables
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
      EC2_INSTANCE_ID: ${{ vars.EC2_INSTANCE_ID }}
      IMAGE_TAG: ${{ github.run_number }}
      FULL_IMAGE_NAME: ${{ vars.ECR_REGISTRY_ID }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.run_number }}

    steps:
      # --- PHASE 1: Checkout Code and Configure AWS Credentials ---
      
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- PHASE 2: Build and Push Docker Image to ECR ---

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $FULL_IMAGE_NAME
          echo "Pushing $FULL_IMAGE_NAME to ECR..."
          docker push $FULL_IMAGE_NAME

      # --- PHASE 3: Deploy to EC2 via SSM Run Command ---

      - name: Deploy new image via SSM Run Command
        run: |
          echo "Sending deployment commands to EC2 instance: ${{ env.EC2_INSTANCE_ID }}"
          echo "Updating the IMAGE_URI in the .env file..."
          aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo sed -i.bak \"s|IMAGE_URI=.*|IMAGE_URI=${{ env.FULL_IMAGE_NAME }}|\" /opt/rsi-bot.env"]' \
            --region ${{ env.AWS_REGION }} \
            --output text
          
          echo "Restarting the rsi-bot service..."
          aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo systemctl daemon-reload", "sudo systemctl restart rsi-bot.service", "sudo systemctl status rsi-bot.service --no-pager"]' \
            --region ${{ env.AWS_REGION }} \
            --output text
          
          echo "Deployment commands sent. Check SSM Command History for status."
